# -*- coding: utf-8 -*-
"""add_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MJjL7HH1Jasdq8PXcmCa01ZicH5ddQQs
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestClassifier
from io import BytesIO

# Titre de l'application
st.set_page_config(page_title="Classification des Patients en Dialyse", layout="wide")
st.title("ğŸ’Š Application de classification des patients en dialyse")

# Chargement du modÃ¨le depuis GitHub ou fichier local
@st.cache_resource
def load_model():
    model_url = "https://github.com/sondesmh/CKD-classification/raw/main/random_forest_model.pkl"
    return joblib.load(model_url)

model = load_model()

# Chargement des donnÃ©es depuis GitHub
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/sondesmh/CKD-classification/main/patient_data.xlsx"
    return pd.read_excel(url)

df = load_data()

# PrÃ©paration des variables
target = "target"
features = df.drop(columns=target).columns.tolist()

# CrÃ©ation du formulaire utilisateur
st.header("ğŸ“‹ Entrer les caractÃ©ristiques du patient")

with st.form("patient_form"):
    input_data = {}
    col1, col2 = st.columns(2)
    for i, feature in enumerate(features):
        with (col1 if i % 2 == 0 else col2):
            if df[feature].dtype == 'object':
                input_data[feature] = st.selectbox(f"{feature}", options=df[feature].unique())
            else:
                min_val = float(df[feature].min())
                max_val = float(df[feature].max())
                input_data[feature] = st.slider(f"{feature}", min_val, max_val, float(df[feature].mean()))

    submitted = st.form_submit_button("âœ… Classifier le patient")

# Traitement aprÃ¨s soumission
if submitted:
    input_df = pd.DataFrame([input_data])

    pred = model.predict(input_df)[0]
    pred_proba = model.predict_proba(input_df)[0]

    classe = "ğŸ”´ Patient Malade" if pred == 1 else "ğŸŸ¢ Patient Sain"
    couleur = "red" if pred == 1 else "green"
    proba = f"{100 * pred_proba[pred]:.1f}%"

    st.markdown(f"### ğŸ§  PrÃ©diction : <span style='color:{couleur}'>{classe}</span>", unsafe_allow_html=True)
    st.write(f"Confiance : {proba}")

    # Affichage des caractÃ©ristiques
    st.subheader("ğŸ§¾ CaractÃ©ristiques saisies")
    st.dataframe(input_df)

    # Ajout Ã  la base locale
    input_df[target] = pred
    df_updated = pd.concat([df, input_df], ignore_index=True)

    st.success("âœ… Patient ajoutÃ© Ã  la base locale (non enregistrÃ©e sur GitHub).")

    # GÃ©nÃ©rer un fichier Excel Ã  tÃ©lÃ©charger
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_updated.to_excel(writer, index=False)
    output.seek(0)

    st.download_button(
        label="ğŸ“¥ TÃ©lÃ©charger la base mise Ã  jour",
        data=output,
        file_name="patients_mis_a_jour.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

